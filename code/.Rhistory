arrange(data,hora) %>% group_by(concat_coord) %>%
mutate(timestamp = seq(1:length(yobs)))
head(res2)
res2 %>% ggplot(aes(x = timestamp, y = yobs)) + geom_line() +
facet_wrap(~cenario, ncol = 2, scales = "free")
?gather
res2 = results %>%
filter(target == "temp", #concat_coord == "-1.6-6.9-1.2",
hmlook_back == 1, tecnica == "brt") %>%
arrange(data,hora) %>% group_by(concat_coord) %>%
mutate(timestamp = seq(1:length(yobs))) %>% as.data.frame()
head(res2)
res2 = res2 %>% gather(tipo_medida, medida, c(yobs,ypred))
head(res2)
res2 = results %>%
filter(target == "temp", #concat_coord == "-1.6-6.9-1.2",
hmlook_back == 1, tecnica == "brt") %>%
arrange(data,hora) %>% group_by(concat_coord) %>%
mutate(timestamp = seq(1:length(yobs))) %>% as.data.frame()
res2 = res2 %>% gather(tipo_medida, medida, c(yobs,ypred))
res2 %>% ggplot(aes(x = timestamp, y = medida, col = tipo_medida)) + geom_line() +
facet_wrap(~cenario, ncol = 2, scales = "free")
res2 = results %>%
filter(target == "temp",
hmlook_back == 1, tecnica == "brt") %>%
arrange(data,hora) %>% group_by(concat_coord) %>%
mutate(timestamp = seq(1:length(yobs))) %>%
gather(tipo_medida, medida, c(yobs,ypred)) %>%
as.data.frame()
res2 %>% ggplot(aes(x = timestamp, y = medida, col = tipo_medida)) + geom_line() +
facet_wrap(~cenario, ncol = 2, scales = "free")
files_to_viz = list.files("../../results/", pattern = "ypred", recursive = T, full.names = T)
res =list()
for(i in 1:length(files_to_viz)){
res[[i]] = read.table(files_to_viz[[i]],header = T, sep = " ", skip = 0) %>%
mutate_if(is.factor, as.character)
}
results = do.call(bind_rows, res) %>% mutate(erro = ypred - yobs) %>%
mutate(abs_error = abs(erro))
# Plotting MAE progress over Scenarios -----------------------------------
res1 = results %>% group_by(tecnica,target,cenario, hmlook_back) %>%
summarise(mae = mean(abs_error))
res1 %>% filter(target == "temp") %>%
ggplot(aes(x = hmlook_back, y = mae, col = cenario)) + geom_line()+
facet_wrap(.~tecnica, scales  = "free")
res2 = results %>%
filter(target == "temp",
hmlook_back == 1, tecnica == "brt") %>%
arrange(data,hora) %>% group_by(concat_coord) %>%
mutate(timestamp = seq(1:length(yobs))) %>%
gather(tipo_medida, medida, c(yobs,ypred)) %>%
as.data.frame()
res2 %>% ggplot(aes(x = timestamp, y = medida, col = tipo_medida)) + geom_line() +
facet_wrap(~cenario, ncol = 2, scales = "free") + xlab('Timestamp') +
ylab('Temperatura (Â°C)') +
scale_color_manual(labels = c("Real", "Predito"),values=c(rgb(1,0,0), rgb(0,0,1,0.7))) +
theme_bw() + theme(text = element_text(size = 7)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
theme(axis.text.x = element_text(size = 6))+
theme(axis.text.y = element_text(size=6))+
theme(axis.title = element_text(size=12))+
theme(legend.text=element_text(size=10))+
theme(legend.title = element_text(size = 10))+
theme(strip.text = element_text(size = 10))
files_to_viz = list.files("../../results/", pattern = "ypred", recursive = T, full.names = T)
res =list()
for(i in 1:length(files_to_viz)){
res[[i]] = read.table(files_to_viz[[i]],header = T, sep = " ", skip = 0) %>%
mutate_if(is.factor, as.character)
}
results = do.call(bind_rows, res) %>% mutate(erro = ypred - yobs) %>%
mutate(abs_error = abs(erro))
# Plotting MAE progress over Scenarios -----------------------------------
res1 = results %>% group_by(tecnica,target,cenario, hmlook_back) %>%
summarise(mae = mean(abs_error))
res1 %>% filter(target == "temp") %>%
ggplot(aes(x = hmlook_back, y = mae, col = cenario)) + geom_line()+
facet_wrap(.~tecnica, scales  = "free")
res1
res1 = results %>% group_by(tecnica,target,cenario, hmlook_back) %>%
summarise(mae = mean(abs_error)) %>% as.data.frame()
res1
res1 = results %>% group_by(tecnica,target,cenario, hmlook_back) %>%
summarise(mae = mean(abs_error)) %>% as.data.frame()
res1 %>% filter(target == "ur") %>%
ggplot(aes(x = hmlook_back, y = mae, col = cenario)) + geom_line()+
facet_wrap(.~tecnica, scales  = "free")
res1 = results %>% group_by(tecnica,target,cenario, hmlook_back) %>%
summarise(mae = mean(abs_error)) %>% as.data.frame()
res1 %>% filter(target == "temp") %>%
ggplot(aes(x = hmlook_back, y = mae, col = cenario)) + geom_line()+
facet_wrap(.~tecnica, scales  = "free")
files_tbmodel = list.files('../../data/',
full.names = T,
pattern = ".RData")
dat = get(load(files_tbmodel[[4]]))
head(dat)
test_lines = which(dat$data %in% unique(dat$data)[8:10])
ver = dat[test_lines,] %>% arrange(data,hora)
head(ver)
files_to_c = list.files("../../results/svm", pattern = "ypred", recursive = T, full.names = T)
i = 1
res = read.table(files_to_c[[i]],header = T, sep = " ", skip = 0)
head(res)
i = 2
i = 4
res = read.table(files_to_c[[i]],header = T, sep = " ", skip = 0)
head(res)
i = 8
res = read.table(files_to_c[[i]],header = T, sep = " ", skip = 0)
head(res)
i = 12
res = read.table(files_to_c[[i]],header = T, sep = " ", skip = 0)
head(res)
head(ver)
head(ver$yobs)
head(ver$temp)
head(res)
files_tbmodel = list.files('../../data/',
full.names = T,
pattern = ".RData")
dat = get(load(files_tbmodel[[4]]))
test_lines = which(dat$data %in% unique(dat$data)[8:10])
ver = dat[test_lines,] %>% arrange(data,hora)
concat_cen9 = ver$concat_coord
files_to_c = list.files("../../results/svm", pattern = "ypred", recursive = T, full.names = T)
for(i in 1:length(files_to_c)){
res = read.table(files_to_c[[i]],header = T, sep = " ", skip = 0)
if(unique(res$cenario) == "Cenario_9"){
res = res %>% mutate(concat_coord = concat_cen9)
write.table(res, file = files_to_c[[i]] )
}
}
files_tbmodel = list.files('../../data/',
full.names = T,
pattern = ".RData")
dat = get(load(files_tbmodel[[3]]))
test_lines = which(dat$data %in% unique(dat$data)[8:10])
ver = dat[test_lines,] %>% arrange(data,hora)
head(ver)
concat_cen7 = ver$concat_coord
files_tbmodel = list.files('../../data/',
full.names = T,
pattern = ".RData")
dat = get(load(files_tbmodel[[3]]))
test_lines = which(dat$data %in% unique(dat$data)[8:10])
ver = dat[test_lines,] %>% arrange(data,hora)
concat_cen7 = ver$concat_coord
files_to_c = list.files("../../results/svm", pattern = "ypred", recursive = T, full.names = T)
for(i in 1:length(files_to_c)){
res = read.table(files_to_c[[i]],header = T, sep = " ", skip = 0)
if(unique(res$cenario) == "Cenario_7"){
res = res %>% mutate(concat_coord = concat_cen7)
write.table(res, file = files_to_c[[i]] )
}
}
files_tbmodel = list.files('../../data/',
full.names = T,
pattern = ".RData")
dat = get(load(files_tbmodel[[2]]))
test_lines = which(dat$data %in% unique(dat$data)[8:10])
ver = dat[test_lines,] %>% arrange(data,hora)
concat_cen5 = ver$concat_coord
head(dat$cenario)
files_tbmodel = list.files('../../data/',
full.names = T,
pattern = ".RData")
dat = get(load(files_tbmodel[[2]]))
test_lines = which(dat$data %in% unique(dat$data)[8:10])
ver = dat[test_lines,] %>% arrange(data,hora)
concat_cen5 = ver$concat_coord
files_to_c = list.files("../../results/svm", pattern = "ypred", recursive = T, full.names = T)
for(i in 1:length(files_to_c)){
res = read.table(files_to_c[[i]],header = T, sep = " ", skip = 0)
if(unique(res$cenario) == "Cenario_5"){
res = res %>% mutate(concat_coord = concat_cen5)
write.table(res, file = files_to_c[[i]] )
}
}
files_tbmodel = list.files('../../data/',
full.names = T,
pattern = ".RData")
dat = get(load(files_tbmodel[[1]]))
test_lines = which(dat$data %in% unique(dat$data)[8:10])
ver = dat[test_lines,] %>% arrange(data,hora)
concat_cen1 = ver$concat_coord
files_to_c = list.files("../../results/svm", pattern = "ypred", recursive = T, full.names = T)
for(i in 1:length(files_to_c)){
res = read.table(files_to_c[[i]],header = T, sep = " ", skip = 0)
if(unique(res$cenario) == "Cenario_1"){
res = res %>% mutate(concat_coord = concat_cen1)
write.table(res, file = files_to_c[[i]] )
}
}
files_to_viz = list.files("../../results/", pattern = "ypred", recursive = T, full.names = T)
res =list()
for(i in 1:length(files_to_viz)){
res[[i]] = read.table(files_to_viz[[i]],header = T, sep = " ", skip = 0) %>%
mutate_if(is.factor, as.character)
}
results = do.call(bind_rows, res) %>% mutate(erro = ypred - yobs) %>%
mutate(abs_error = abs(erro))
head(results)
files_to_viz = list.files("../../results/", pattern = "ypred", recursive = T, full.names = T)
res =list()
for(i in 1:length(files_to_viz)){
res[[i]] = read.table(files_to_viz[[i]],header = T, sep = " ", skip = 0) %>%
mutate_if(is.factor, as.character)
}
results = do.call(bind_rows, res) %>% mutate(erro = ypred - yobs) %>%
mutate(abs_error = abs(erro))
# Plotting MAE progress over Scenarios -----------------------------------
res1 = results %>% group_by(tecnica,target,cenario, hmlook_back) %>%
summarise(mae = mean(abs_error)) %>% as.data.frame()
res1 %>% filter(target == "temp") %>%
ggplot(aes(x = hmlook_back, y = mae, col = cenario)) + geom_line()+
facet_wrap(.~tecnica, scales  = "free")
library(tidyverse)
files_to_viz = list.files("../../results/", pattern = "ypred", recursive = T, full.names = T)
res =list()
for(i in 1:length(files_to_viz)){
res[[i]] = read.table(files_to_viz[[i]],header = T, sep = " ", skip = 0) %>%
mutate_if(is.factor, as.character)
}
results = do.call(bind_rows, res) %>% mutate(erro = ypred - yobs) %>%
mutate(abs_error = abs(erro))
# Plotting MAE progress over Scenarios -----------------------------------
res1 = results %>% group_by(tecnica,target,cenario, hmlook_back) %>%
summarise(mae = mean(abs_error)) %>% as.data.frame()
res1 %>% filter(target == "temp") %>%
ggplot(aes(x = hmlook_back, y = mae, col = cenario)) + geom_line()+
facet_wrap(.~tecnica, scales  = "free")
results
unique(results$tecnica)
files_to_viz = list.files("../../results/", pattern = "ypred", recursive = T, full.names = T)
res =list()
files_to_viz
for(i in 1:length(files_to_viz)){
res[[i]] = read.table(files_to_viz[[i]],header = T, sep = " ", skip = 0) %>%
mutate_if(is.factor, as.character)
}
results = do.call(bind_rows, res) %>% mutate(erro = ypred - yobs) %>%
mutate(abs_error = abs(erro))
files_tbmodel = list.files('../../data/',
full.names = T,
pattern = ".RData")
dat = get(load(files_tbmodel[[1]]))
test_lines = which(dat$data %in% unique(dat$data)[8:10])
ver = dat[test_lines,] %>% arrange(data,hora)
concat_cen1 = ver$concat_coord
files_to_c = list.files("../../results/svm", pattern = "ypred", recursive = T, full.names = T)
for(i in 1:length(files_to_c)){
res = read.table(files_to_c[[i]],header = T, sep = " ", skip = 0)
if(unique(res$cenario) == "Cenario_1"){
res = res %>% mutate(concat_coord = concat_cen1)
write.table(res, file = files_to_c[[i]] )
}
}
files_tbmodel = list.files('../../data/',
full.names = T,
pattern = ".RData")
dat = get(load(files_tbmodel[[2]]))
test_lines = which(dat$data %in% unique(dat$data)[8:10])
ver = dat[test_lines,] %>% arrange(data,hora)
concat_cen5 = ver$concat_coord
files_tbmodel = list.files('../../data/',
full.names = T,
pattern = ".RData")
dat = get(load(files_tbmodel[[2]]))
test_lines = which(dat$data %in% unique(dat$data)[8:10])
ver = dat[test_lines,] %>% arrange(data,hora)
concat_cen5 = ver$concat_coord
files_to_c = list.files("../../results/svm", pattern = "ypred", recursive = T, full.names = T)
for(i in 1:length(files_to_c)){
res = read.table(files_to_c[[i]],header = T, sep = " ", skip = 0)
if(unique(res$cenario) == "Cenario_5"){
res = res %>% mutate(concat_coord = concat_cen5)
write.table(res, file = files_to_c[[i]] )
}
}
files_tbmodel = list.files('../../data/',
full.names = T,
pattern = ".RData")
dat = get(load(files_tbmodel[[3]]))
test_lines = which(dat$data %in% unique(dat$data)[8:10])
ver = dat[test_lines,] %>% arrange(data,hora)
concat_cen7 = ver$concat_coord
files_to_c = list.files("../../results/svm", pattern = "ypred", recursive = T, full.names = T)
for(i in 1:length(files_to_c)){
res = read.table(files_to_c[[i]],header = T, sep = " ", skip = 0)
if(unique(res$cenario) == "Cenario_7"){
res = res %>% mutate(concat_coord = concat_cen7)
write.table(res, file = files_to_c[[i]] )
}
}
files_tbmodel = list.files('../../data/',
full.names = T,
pattern = ".RData")
dat = get(load(files_tbmodel[[4]]))
test_lines = which(dat$data %in% unique(dat$data)[8:10])
ver = dat[test_lines,] %>% arrange(data,hora)
concat_cen9 = ver$concat_coord
files_to_c = list.files("../../results/svm", pattern = "ypred", recursive = T, full.names = T)
for(i in 1:length(files_to_c)){
res = read.table(files_to_c[[i]],header = T, sep = " ", skip = 0)
if(unique(res$cenario) == "Cenario_9"){
res = res %>% mutate(concat_coord = concat_cen9)
write.table(res, file = files_to_c[[i]] )
}
}
files_to_viz = list.files("../../results/", pattern = "ypred", recursive = T, full.names = T)
res =list()
for(i in 1:length(files_to_viz)){
res[[i]] = read.table(files_to_viz[[i]],header = T, sep = " ", skip = 0) %>%
mutate_if(is.factor, as.character)
}
results = do.call(bind_rows, res) %>% mutate(erro = ypred - yobs) %>%
mutate(abs_error = abs(erro))
files_to_viz = list.files("../../results/", pattern = "ypred", recursive = T, full.names = T)
i = 1
read.table(files_to_viz[[i]],header = T, sep = " ", skip = 0) %>%
mutate_if(is.factor, as.character)
a = read.table(files_to_viz[[i]],header = T, sep = " ", skip = 0) %>%
mutate_if(is.factor, as.character)
head(a)
b = read.table(files_to_viz[[51]],header = T, sep = " ", skip = 0) %>%
mutate_if(is.factor, as.character)
head(b)
res[[1]]
dim(res[[1]])
dim(res[[51]])
files_to_viz = list.files("../../results/", pattern = "ypred", recursive = T, full.names = T)
res =list()
for(i in 1:length(files_to_viz)){
res[[i]] = read.table(files_to_viz[[i]],header = T, sep = " ", skip = 0) %>%
mutate_if(is.factor, as.character)
}
i
res[[49]] = read.table(files_to_viz[[i]],header = T, sep = " ", skip = 0) %>%
mutate_if(is.factor, as.character)
a = read.table(files_to_viz[[i]],header = T, sep = " ", skip = 0) %>%
mutate_if(is.factor, as.character)
files_to_viz[49]
files_to_viz = list.files("../../results/", pattern = "ypred", recursive = T, full.names = T)
res =list()
for(i in 1:length(files_to_viz)){
res[[i]] = read.table(files_to_viz[[i]],header = T, sep = " ", skip = 0) %>%
mutate_if(is.factor, as.character)
}
results = do.call(bind_rows, res) %>% mutate(erro = ypred - yobs) %>%
mutate(abs_error = abs(erro))
# Plotting MAE progress over Scenarios -----------------------------------
res1 = results %>% group_by(tecnica,target,cenario, hmlook_back) %>%
summarise(mae = mean(abs_error)) %>% as.data.frame()
res1 %>% filter(target == "temp") %>%
ggplot(aes(x = hmlook_back, y = mae, col = cenario)) + geom_line()+
facet_wrap(.~tecnica, scales  = "free")
library(mlr)
?makeDummyFeaturesWrapper
library(e1071)
?svm
library(mlr)
library(tidyverse)
library(parallel)
library(parallelMap)
rm(list = ls())
gc()
#collectiong data to be modeled
files_tbmodel = list.files('../../data/',
full.names = T,
pattern = ".RData")
target = c("ur","temp")
hmlook_back = seq(1:6)
file = files_tbmodel[1]
target = "temp"
hmlook_back = 6
dat = get(load(file))
#definindo o range de look_back
range_lback = paste0("prev_",seq(hmlook_back,6), collapse = "|")
#para ordenar os dados por data e hora
dat = dat %>% select(c(data,hora,medicao, concat_coord, cenario, range_datas),
c(target),
c(x,y,z),
matches(range_lback)) #mantenho as colunas que contem look_back
#criando variaveis para compor o arquivo de resultados
cenario = unique(dat$cenario)
# mantaining only complete caes (in function of variable look back (done))
dat = dat[complete.cases(dat),] %>% arrange(data,hora)
#train_lines are those considering the 7 first dates. Test is all the three remaining days
train_lines = which(dat$data %in% unique(dat$data)[1:7]) #sete primeiras datas
test_lines = which(dat$data %in% unique(dat$data)[8:10])
#infos for results saving
hora = dat[test_lines,]$hora
data = dat[test_lines,]$data
range_datas = unique(dat$range_datas)
concat_coord = dat[test_lines,]$concat_coord
#creating blocking column for CV - train_lines(1:5) and test_lines(6)
blocking_train = rep(1:5, each = ceiling(length(train_lines)/5))
blocking_train = blocking_train[1:length(train_lines)]
blocking_test = rep(6, length(test_lines))
block = as.factor(c(blocking_train,blocking_test))
#Tirando as colunas que afetarao a modelagem. Ou possuem correlacao ou nao fazem parte do set up
dat = dat %>% select(-c(data,hora,medicao, concat_coord, cenario, range_datas))
dat = dat %>% mutate_at(vars("x","y","z"), funs(as.factor))
head(dat)
str(dat)
df = createDummyFeatures(dat)
head(df)
?makeDummyFeaturesWrapper
?svm
?makeRemoveConstantFeaturesWrapper
head(dat)
head(df)
df = removeConstantFeatures(df)
head(df)
cv = read.table("../../results/svm/cv/cv_temp_Cenario_1_1.txt", col.names = T)
cv = read.table("../../results/svm/cv/cv_temp_Cenario_1_1.txt", col.names = T, sep = ";")
cv
cv = read.table("../../results/svm/cv/cv_temp_Cenario_1_1.txt", col.names = T, sep = " ")
cv = read.table("../../results/svm/cv/cv_temp_Cenario_1_1.txt", col.names = T, sep = "\t")
cv
cv = read.table("../../results/svm/cv/cv_temp_Cenario_1_1.txt", col.names = T, sep = " ")
cv = read.table("../../results/svm/cv/cv_temp_Cenario_1_1.txt", col.names = T, sep = " ")
cv = read.table("../../results/svm/cv/cv_temp_Cenario_1_1.txt", col.names = T, sep = " ", row.names = F)
cv = read.table("../../results/svm/cv/cv_temp_Cenario_1_1.txt", col.names = T, sep = " ", row.names = T)
cv
cv = read.table("../../results/svm/cv/cv_temp_Cenario_1_1.txt", col.names = T, sep = " ", row.names = T)
cv = read.table("../../results/svm/cv/cv_temp_Cenario_1_1.txt", col.names = T, row.names = T)
cv = read.table("../../results/svm/cv/cv_temp_Cenario_1_1.txt", col.names = T, row.names = T, sep = "\t")
cv = read.table("../../results/svm/cv/cv_temp_Cenario_1_1.txt", col.names = T, row.names = 1, sep = "\t")
cv
cv = read.table("../../results/svm/cv/cv_temp_Cenario_1_1.txt", col.names = T, row.names = 1, sep = " ")
cv
?read.table
cv = read.table("../../results/svm/cv/cv_temp_Cenario_1_1.txt", col.names = T)
cv = read.table("../../results/svm/cv/cv_temp_Cenario_1_1.txt", header = T, sep = " ", skip = 0)
cv
2^(-2:2)
files_to_viz = list.files("../../results/", pattern = "ypred", recursive = T, full.names = T)
res =list()
for(i in 1:length(files_to_viz)){
res[[i]] = read.table(files_to_viz[[i]],header = T, sep = " ", skip = 0) %>%
mutate_if(is.factor, as.character)
}
results = do.call(bind_rows, res) %>% mutate(erro = ypred - yobs) %>%
mutate(abs_error = abs(erro))
files_to_viz
res[[29]] = read.table(files_to_viz[[49]],header = T, sep = " ", skip = 0) %>%
mutate_if(is.factor, as.character)
df = read.table(files_to_viz[[49]],header = T, sep = " ", skip = 0) %>%
mutate_if(is.factor, as.character)
df = read.table(files_to_viz[49],header = T, sep = " ", skip = 0) %>%
mutate_if(is.factor, as.character)
files_to_viz[49]
df = read.table(files_to_viz[49],header = T, sep = " ", skip = 0) %>%
mutate_if(is.factor, as.character)
df = read.table(files_to_viz[49],header = T, sep = " ", skip = 0, row.names = 1) %>%
mutate_if(is.factor, as.character)
df = read.table(files_to_viz[49],header = T, sep = ";", skip = 0, row.names = 1) %>%
mutate_if(is.factor, as.character)
head(df)
df = read.table(files_to_viz[49],header = T, sep = ";", skip = 0) %>%
mutate_if(is.factor, as.character)
head(df)
df = read.table(files_to_viz[49],header = T, sep = ",", skip = 0) %>%
mutate_if(is.factor, as.character)
head(df)
df = read.table(files_to_viz[49],header = T, sep = ",", skip = 0, row.names = 1) %>%
mutate_if(is.factor, as.character)
head(df)
head(df,20)
df = read.table(files_to_viz[50],header = T, sep = ",", skip = 0, row.names = 1) %>%
mutate_if(is.factor, as.character)
head(df,20)
df = read.table(files_to_viz[51],header = T, sep = ",", skip = 0, row.names = 1) %>%
mutate_if(is.factor, as.character)
head(df,20)
df = read.table(files_to_viz[52],header = T, sep = ",", skip = 0, row.names = 1) %>%
mutate_if(is.factor, as.character)
head(df,20)
seq(1)
#collectiong data to be modeled
files_tbmodel = list.files('../../data/',
full.names = T,
pattern = ".RData")
target = c("ur","temp")
hmlook_back = seq(1)
#para criar um dataframe com todos os inputs possiveis para a func de forecast com svm
df = data.frame(expand.grid(files_tbmodel = files_tbmodel,
target = target,
hmlook_back = hmlook_back, stringsAsFactors = F))
#criando lista a partir de df para iterar
lista = split(df,list(df$files_tbmodel,df$target,df$hmlook_back))
lista[[1]]
files_tbmodel = list.files('../../data/',
full.names = T,
pattern = ".RData")
files_tbmodel
seq(1:6)
files_tbmodel = list.files('../../data/',
full.names = T,
pattern = ".RData")
files_tbmodel = files_tbmodel[1]
target = c("temp")
hmlook_back = seq(1:6)
#para criar um dataframe com todos os inputs possiveis para a func de forecast com svm
df = data.frame(expand.grid(files_tbmodel = files_tbmodel,
target = target,
hmlook_back = hmlook_back, stringsAsFactors = F))
#criando lista a partir de df para iterar
lista = split(df,list(df$files_tbmodel,df$target,df$hmlook_back))
lista
